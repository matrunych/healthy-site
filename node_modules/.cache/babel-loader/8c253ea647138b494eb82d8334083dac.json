{"ast":null,"code":"var _jsxFileName = \"/Applications/web/health-app/src/components/check-box/check-box.js\";\nimport React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport './check-box.css'; // export default function Checkboxes() {\n//   const [checked, setChecked] = React.useState(true);\n//   const handleChange = (event) => {\n//     setChecked(event.target.checked);\n//   };\n//   return (\n//     <div>\n//         <h1>Water</h1>\n//       <Checkbox\n//         checked={checked}\n//         onChange={handleChange}\n//         inputProps={{ 'aria-label': 'primary checkbox' }}\n//       />\n//       <Checkbox\n//         defaultChecked\n//         color=\"primary\"\n//         inputProps={{ 'aria-label': 'secondary checkbox' }}\n//       />\n//       <Checkbox inputProps={{ 'aria-label': 'uncontrolled-checkbox' }} />\n//       <Checkbox\n//         defaultChecked\n//         inputProps={{ 'aria-label': 'indeterminate checkbox' }}\n//       />\n//       <Checkbox\n//         defaultChecked\n//         inputProps={{ 'aria-label': 'checkbox with small size' }}\n//       />\n//     </div>\n//   );\n// }\n// export const CheckBox = props => {\n//     return (\n//       <li>\n//        <input key={props.id} onClick={props.handleCheckChieldElement} type=\"checkbox\" checked={props.isChecked} value={props.value} /> {props.value}\n//       </li>\n//     )\n// }\n// export default CheckBox\n// class Checkboxes extends React.Component {\n//     constructor(props) {\n//       super(props)\n//       this.state = {\n//         fruites: [\n//           {id: 1, value: \"banana\", isChecked: false},\n//           {id: 2, value: \"apple\", isChecked: false},\n//           {id: 3, value: \"mango\", isChecked: false},\n//           {id: 4, value: \"grap\", isChecked: false}\n//         ]\n//       }\n//     }\n//     handleAllChecked = (event) => {\n//       let fruites = this.state.fruites\n//       fruites.forEach(fruite => fruite.isChecked = event.target.checked) \n//       this.setState({fruites: fruites})\n//     }\n//     handleCheckChieldElement = (event) => {\n//       let fruites = this.state.fruites\n//       fruites.forEach(fruite => {\n//          if (fruite.value === event.target.value)\n//             fruite.isChecked =  event.target.checked\n//       })\n//       this.setState({fruites: fruites})\n//     }\n//     render() {\n//       return (\n//         <div className=\"App\">\n//         <h1> Check and Uncheck All Example </h1>\n//         <input type=\"checkbox\" onClick={this.handleAllChecked}  value=\"checkedall\" /> Check / Uncheck All\n//           <ul>\n//           {\n//             this.state.fruites.map((fruite) => {\n//               return (<CheckBox handleCheckChieldElement={this.handleCheckChieldElement}  {...fruite} />)\n//             })\n//           }\n//           </ul>\n//         </div>\n//       );\n//     }\n//   }\n//   // export default Checkboxes\n// // class HabitProgress extends React.Component {\n// //   constructor(props) {\n// //     super(props)\n// //     this.state = {\n// //       percentage: 0\n//     }\n//     this.nextStep = this.nextStep.bind(this)\n//   }\n//   nextStep() {\n//     if(this.percentage === 100) return \n//     else{\n//       this.percentage =this.percentage + 12.5   \n//       console.log(this.percentage)\n//     }\n//     console.log(\"ADD 12\");\n//   }\n//   render() {\n//     return (\n//       <div className = 'progress'>\n//         <h2>{this.props.title}</h2>\n//         <ProgressBar percentage={this.props.percentage} />\n//         <div style={{ marginTop: '20px' }}>  \n//           <button\n//             onClick={this.props.nextStep}\n//            >\n//             {this.props.increment}\n//           </button>  \n//           <button style={{width: '70px', height:'30px', marginTop: '10px',backgroundColor: 'rgba(231, 27, 27, 0.795)', marginBottom: '15px'}} onClick={() => this.setState({ percentage: 0 })}> {this.props.reset}</button>\n//         </div>   \n//       </div>\n//     )\n//   }  \n// }\n// class ProgressBar extends React.Component{\n//   constructor(props) {\n//     super(props)\n//   }\n//   render(){\n//     return (\n//       <div className=\"progress-bar\">\n//         <Filler percentage={this.props.percentage} />\n//       </div>\n//     )\n//   }\n// }\n// // const ProgressBar = (props) => {\n// //   console.log(\"HUINYA\");\n// //   console.log(props.percentage);\n// //   return (\n// //       <div className=\"progress-bar\">\n// //         <Filler percentage={props.percentage} />\n// //       </div>\n// //     )\n// // }\n// // const Filler = (props) => {\n// //   return <div className=\"filler\" style={{ width: `${props.percentage}%` }} />\n// // }\n// class Filler extends React.Component{\n//   constructor(props) {\n//     super(props)\n//   }\n//   render(){\n//     return <div className=\"filler\" style={{ width: `${this.props.percentage}%` }} />\n//   }\n// }\n// export default class HabitProgressList extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.state = {\n//       habits: [\n//         {\n//           title: \"Water tracker\",\n//           percentage: 0,\n//           increment: \"+1 glass\",\n//           reset: \"Reset\"\n//         },\n//         {\n//           title: \"Else \",\n//           percentage: 25,\n//           increment: \"+\",\n//           reset: \"Reset\"\n//         },\n//       ]\n//     }\n//       }\n//       render(){\n//         return(\n//           <div>\n//             {this.state.habits.map((habit) => (\n//               console.log(habit.title),\n//           <HabitProgress title={habit.title} percentage={habit.percentage} increment={habit.increment} reset={habit.reset}  toggleIsDone={(id) => this.toggleIsDone(id)} />\n//         ))}\n//           </div>\n//         )\n//       }\n// }\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setInlineProgress = this.setInlineProgress.bind(this);\n    this.showInfinite = this.showInfinite.bind(this);\n    this.showDeterminate = this.showDeterminate.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      title: \"Progress Bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Block, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }\n    }, \"In addition to \", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"/preloader/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 29\n      }\n    }, \"Preloader\"), \", Framework7 also comes with fancy animated determinate and infinite/indeterminate progress bars to indicate some activity.\")), /*#__PURE__*/React.createElement(BlockTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }\n    }, \"Determinate Progress Bar\"), /*#__PURE__*/React.createElement(Block, {\n      strong: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }\n    }, \"When progress bar is determinate it indicates how long an operation will take when the percentage complete is detectable.\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }\n    }, \"Inline determinate progress bar:\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Progressbar, {\n      progress: 10,\n      id: \"demo-inline-progressbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 16\n      }\n    })), /*#__PURE__*/React.createElement(Segmented, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: () => {\n        this.setInlineProgress(10);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 15\n      }\n    }, \"10%\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => {\n        this.setInlineProgress(30);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 15\n      }\n    }, \"30%\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => {\n        this.setInlineProgress(50);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 15\n      }\n    }, \"50%\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => {\n        this.setInlineProgress(100);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 15\n      }\n    }, \"100%\"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 13\n      }\n    }, \"Inline determinate load & hide:\"), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"demo-determinate-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      raised: true,\n      onClick: () => {\n        this.showDeterminate(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 15\n      }\n    }, \"Start Loading\"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 13\n      }\n    }, \"Overlay with determinate progress bar on top of the app:\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      raised: true,\n      onClick: () => {\n        this.showDeterminate(false);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 15\n      }\n    }, \"Start Loading\")))), /*#__PURE__*/React.createElement(BlockTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }\n    }, \"Infinite Progress Bar\"), /*#__PURE__*/React.createElement(Block, {\n      strong: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }\n    }, \"When progress bar is infinite/indeterminate it requests that the user wait while something finishes when it\\u2019s not necessary to indicate how long it will take.\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }\n    }, \"Inline infinite progress bar\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Progressbar, {\n      infinite: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }\n    }, \"Multi-color infinite progress bar\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Progressbar, {\n      infinite: true,\n      color: \"multi\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 13\n      }\n    }, \"Overlay with infinite progress bar on top of the app\"), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"demo-infinite-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      raised: true,\n      onClick: () => {\n        this.showInfinite(false);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 15\n      }\n    }, \"Start Loading\"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 13\n      }\n    }, \"Overlay with infinite multi-color progress bar on top of the app\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      raised: true,\n      onClick: () => {\n        this.showInfinite(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 15\n      }\n    }, \"Start Loading\")))), /*#__PURE__*/React.createElement(BlockTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }\n    }, \"Colors\"), /*#__PURE__*/React.createElement(List, {\n      simpleList: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Progressbar, {\n      color: \"blue\",\n      progress: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(ListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Progressbar, {\n      color: \"red\",\n      progress: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(ListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Progressbar, {\n      color: \"pink\",\n      progress: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(ListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Progressbar, {\n      color: \"green\",\n      progress: 80,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(ListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Progressbar, {\n      color: \"yellow\",\n      progress: 90,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(ListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Progressbar, {\n      color: \"orange\",\n      progress: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n  setInlineProgress(value) {\n    const self = this;\n    const app = self.$f7;\n    app.progressbar.set('#demo-inline-progressbar', value);\n  }\n\n  showDeterminate(inline) {\n    const self = this;\n    const app = self.$f7;\n    if (self.determinateLoading) return;\n    self.determinateLoading = true;\n    let progressBarEl;\n\n    if (inline) {\n      progressBarEl = app.progressbar.show('#demo-determinate-container', 0);\n    } else {\n      progressBarEl = app.progressbar.show(0, app.theme === 'md' ? 'yellow' : 'blue');\n    }\n\n    let progress = 0;\n\n    function simulateLoading() {\n      setTimeout(() => {\n        const progressBefore = progress;\n        progress += Math.random() * 20;\n        app.progressbar.set(progressBarEl, progress);\n\n        if (progressBefore < 100) {\n          simulateLoading(); // keep \"loading\"\n        } else {\n          self.determinateLoading = false;\n          app.progressbar.hide(progressBarEl); // hide\n        }\n      }, Math.random() * 200 + 200);\n    }\n\n    simulateLoading();\n  }\n\n  showInfinite(multiColor) {\n    const self = this;\n    const app = self.$f7;\n    if (self.infiniteLoading) return;\n    self.infiniteLoading = true;\n\n    if (multiColor) {\n      app.progressbar.show('multi');\n    } else {\n      app.progressbar.show(app.theme === 'md' ? 'yellow' : 'blue');\n    }\n\n    setTimeout(() => {\n      self.infiniteLoading = false;\n      app.progressbar.hide();\n    }, 3000);\n  }\n\n}\n;","map":{"version":3,"sources":["/Applications/web/health-app/src/components/check-box/check-box.js"],"names":["React","Checkbox","Component","constructor","props","setInlineProgress","bind","showInfinite","showDeterminate","render","value","self","app","$f7","progressbar","set","inline","determinateLoading","progressBarEl","show","theme","progress","simulateLoading","setTimeout","progressBefore","Math","random","hide","multiColor","infiniteLoading"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAO,iBAAP,C,CAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,eAAe,cAAcD,KAAK,CAACE,SAApB,CAA8B;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKE,eAAL,GAAuB,K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","sourcesContent":["import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport './check-box.css'\n\n// export default function Checkboxes() {\n//   const [checked, setChecked] = React.useState(true);\n\n//   const handleChange = (event) => {\n//     setChecked(event.target.checked);\n//   };\n\n//   return (\n//     <div>\n//         <h1>Water</h1>\n//       <Checkbox\n//         checked={checked}\n//         onChange={handleChange}\n//         inputProps={{ 'aria-label': 'primary checkbox' }}\n//       />\n//       <Checkbox\n//         defaultChecked\n//         color=\"primary\"\n//         inputProps={{ 'aria-label': 'secondary checkbox' }}\n//       />\n//       <Checkbox inputProps={{ 'aria-label': 'uncontrolled-checkbox' }} />\n//       <Checkbox\n//         defaultChecked\n  \n//         inputProps={{ 'aria-label': 'indeterminate checkbox' }}\n//       />\n     \n//       <Checkbox\n//         defaultChecked\n//         inputProps={{ 'aria-label': 'checkbox with small size' }}\n//       />\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n// export const CheckBox = props => {\n//     return (\n//       <li>\n//        <input key={props.id} onClick={props.handleCheckChieldElement} type=\"checkbox\" checked={props.isChecked} value={props.value} /> {props.value}\n//       </li>\n//     )\n// }\n\n// export default CheckBox\n\n\n// class Checkboxes extends React.Component {\n//     constructor(props) {\n//       super(props)\n//       this.state = {\n//         fruites: [\n//           {id: 1, value: \"banana\", isChecked: false},\n//           {id: 2, value: \"apple\", isChecked: false},\n//           {id: 3, value: \"mango\", isChecked: false},\n//           {id: 4, value: \"grap\", isChecked: false}\n//         ]\n//       }\n//     }\n    \n//     handleAllChecked = (event) => {\n//       let fruites = this.state.fruites\n//       fruites.forEach(fruite => fruite.isChecked = event.target.checked) \n//       this.setState({fruites: fruites})\n//     }\n  \n//     handleCheckChieldElement = (event) => {\n//       let fruites = this.state.fruites\n//       fruites.forEach(fruite => {\n//          if (fruite.value === event.target.value)\n//             fruite.isChecked =  event.target.checked\n//       })\n//       this.setState({fruites: fruites})\n//     }\n  \n//     render() {\n//       return (\n//         <div className=\"App\">\n//         <h1> Check and Uncheck All Example </h1>\n//         <input type=\"checkbox\" onClick={this.handleAllChecked}  value=\"checkedall\" /> Check / Uncheck All\n//           <ul>\n//           {\n//             this.state.fruites.map((fruite) => {\n//               return (<CheckBox handleCheckChieldElement={this.handleCheckChieldElement}  {...fruite} />)\n//             })\n//           }\n//           </ul>\n//         </div>\n//       );\n//     }\n//   }\n  \n//   // export default Checkboxes\n\n\n// // class HabitProgress extends React.Component {\n// //   constructor(props) {\n// //     super(props)\n    \n// //     this.state = {\n// //       percentage: 0\n//     }\n//     this.nextStep = this.nextStep.bind(this)\n//   }\n//   nextStep() {\n//     if(this.percentage === 100) return \n//     else{\n//       this.percentage =this.percentage + 12.5   \n//       console.log(this.percentage)\n\n//     }\n//     console.log(\"ADD 12\");\n\n//   }\n  \n//   render() {\n//     return (\n//       <div className = 'progress'>\n        \n//         <h2>{this.props.title}</h2>\n        \n//         <ProgressBar percentage={this.props.percentage} />\n        \n//         <div style={{ marginTop: '20px' }}>  \n        \n//           <button\n//             onClick={this.props.nextStep}\n//            >\n//             {this.props.increment}\n//           </button>  \n\n//           <button style={{width: '70px', height:'30px', marginTop: '10px',backgroundColor: 'rgba(231, 27, 27, 0.795)', marginBottom: '15px'}} onClick={() => this.setState({ percentage: 0 })}> {this.props.reset}</button>\n          \n//         </div>   \n        \n//       </div>\n//     )\n//   }  \n// }\n\n\n// class ProgressBar extends React.Component{\n//   constructor(props) {\n//     super(props)\n//   }\n//   render(){\n//     return (\n    \n//       <div className=\"progress-bar\">\n//         <Filler percentage={this.props.percentage} />\n//       </div>\n//     )\n//   }\n// }\n// // const ProgressBar = (props) => {\n// //   console.log(\"HUINYA\");\n// //   console.log(props.percentage);\n\n// //   return (\n    \n// //       <div className=\"progress-bar\">\n// //         <Filler percentage={props.percentage} />\n// //       </div>\n// //     )\n// // }\n\n// // const Filler = (props) => {\n// //   return <div className=\"filler\" style={{ width: `${props.percentage}%` }} />\n// // }\n\n// class Filler extends React.Component{\n//   constructor(props) {\n//     super(props)\n//   }\n//   render(){\n//     return <div className=\"filler\" style={{ width: `${this.props.percentage}%` }} />\n\n//   }\n// }\n\n\n// export default class HabitProgressList extends React.Component {\n//   constructor(props) {\n//     super(props)\n    \n//     this.state = {\n//       habits: [\n//         {\n//           title: \"Water tracker\",\n//           percentage: 0,\n//           increment: \"+1 glass\",\n//           reset: \"Reset\"\n//         },\n//         {\n//           title: \"Else \",\n//           percentage: 25,\n//           increment: \"+\",\n//           reset: \"Reset\"\n//         },\n//       ]\n     \n//     }\n//       }\n\n//       render(){\n//         return(\n\n//           <div>\n            \n//             {this.state.habits.map((habit) => (\n//               console.log(habit.title),\n//           <HabitProgress title={habit.title} percentage={habit.percentage} increment={habit.increment} reset={habit.reset}  toggleIsDone={(id) => this.toggleIsDone(id)} />\n//         ))}\n//           </div>\n//         )\n//       }\n// }\n\n\n\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setInlineProgress = this.setInlineProgress.bind(this);\n    this.showInfinite = this.showInfinite.bind(this);\n    this.showDeterminate = this.showDeterminate.bind(this);\n  }\n  render() {\n    return (\n      <Page>\n        <Navbar title=\"Progress Bar\"></Navbar>\n        <Block>\n          <p>In addition to <a href=\"/preloader/\">Preloader</a>, Framework7 also comes with fancy animated determinate and infinite/indeterminate progress bars to indicate some activity.</p>\n        </Block>\n        <BlockTitle>Determinate Progress Bar</BlockTitle>\n        <Block strong>\n          <p>When progress bar is determinate it indicates how long an operation will take when the percentage complete is detectable.</p>\n          <p>Inline determinate progress bar:</p>\n          <div>\n            <p><Progressbar progress={10} id=\"demo-inline-progressbar\"></Progressbar></p>\n            <Segmented raised>\n              <Button onClick={()=>{this.setInlineProgress(10)}}>10%</Button>\n              <Button onClick={()=>{this.setInlineProgress(30)}}>30%</Button>\n              <Button onClick={()=>{this.setInlineProgress(50)}}>50%</Button>\n              <Button onClick={()=>{this.setInlineProgress(100)}}>100%</Button>\n            </Segmented>\n          </div>\n          <div>\n            <p>Inline determinate load & hide:</p>\n            <p id=\"demo-determinate-container\"></p>\n            <p>\n              <Button raised onClick={()=>{this.showDeterminate(true)}}>Start Loading</Button>\n            </p>\n          </div>\n          <div>\n            <p>Overlay with determinate progress bar on top of the app:</p>\n            <p>\n              <Button raised onClick={()=>{this.showDeterminate(false)}}>Start Loading</Button>\n            </p>\n          </div>\n        </Block>\n        <BlockTitle>Infinite Progress Bar</BlockTitle>\n        <Block strong>\n          <p>When progress bar is infinite/indeterminate it requests that the user wait while something finishes when it’s not necessary to indicate how long it will take.</p>\n          <p>Inline infinite progress bar</p>\n          <p>\n            <Progressbar infinite></Progressbar>\n          </p>\n          <p>Multi-color infinite progress bar</p>\n          <p>\n            <Progressbar infinite color=\"multi\"></Progressbar>\n          </p>\n          <div>\n            <p>Overlay with infinite progress bar on top of the app</p>\n            <p id=\"demo-infinite-container\"></p>\n            <p>\n              <Button raised onClick={()=>{this.showInfinite(false)}}>Start Loading</Button>\n            </p>\n          </div>\n          <div>\n            <p>Overlay with infinite multi-color progress bar on top of the app</p>\n            <p>\n              <Button raised onClick={()=>{this.showInfinite(true)}}>Start Loading</Button>\n            </p>\n          </div>\n        </Block>\n        <BlockTitle>Colors</BlockTitle>\n        <List simpleList>\n          <ListItem>\n            <Progressbar color=\"blue\" progress={10}></Progressbar>\n          </ListItem>\n          <ListItem>\n            <Progressbar color=\"red\" progress={20}></Progressbar>\n          </ListItem>\n          <ListItem>\n            <Progressbar color=\"pink\" progress={30}></Progressbar>\n          </ListItem>\n          <ListItem>\n            <Progressbar color=\"green\" progress={80}></Progressbar>\n          </ListItem>\n          <ListItem>\n            <Progressbar color=\"yellow\" progress={90}></Progressbar>\n          </ListItem>\n          <ListItem>\n            <Progressbar color=\"orange\" progress={100}></Progressbar>\n          </ListItem>\n        </List>\n      </Page>\n    );\n  }\n  setInlineProgress(value) {\n    const self = this;\n    const app = self.$f7;\n    app.progressbar.set('#demo-inline-progressbar', value);\n  }\n  showDeterminate(inline) {\n    const self = this;\n    const app = self.$f7;\n    if (self.determinateLoading) return;\n    self.determinateLoading = true;\n    let progressBarEl;\n    if (inline) {\n      progressBarEl = app.progressbar.show('#demo-determinate-container', 0);\n    } else {\n      progressBarEl = app.progressbar.show(0, app.theme === 'md' ? 'yellow' : 'blue');\n    }\n    let progress = 0;\n    function simulateLoading() {\n      setTimeout(() => {\n        const progressBefore = progress;\n        progress += Math.random() * 20;\n        app.progressbar.set(progressBarEl, progress);\n        if (progressBefore < 100) {\n          simulateLoading(); // keep \"loading\"\n        } else {\n          self.determinateLoading = false;\n          app.progressbar.hide(progressBarEl); // hide\n        }\n      }, Math.random() * 200 + 200);\n    }\n    simulateLoading();\n  }\n  showInfinite(multiColor) {\n    const self = this;\n    const app = self.$f7;\n    if (self.infiniteLoading) return;\n    self.infiniteLoading = true;\n    if (multiColor) {\n      app.progressbar.show('multi');\n    } else {\n      app.progressbar.show(app.theme === 'md' ? 'yellow' : 'blue');\n    }\n    setTimeout(() => {\n      self.infiniteLoading = false;\n      app.progressbar.hide();\n    }, 3000);\n  }\n};"]},"metadata":{},"sourceType":"module"}