{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Desktop/web2/healthy-site/src/components/habits/habits.js\";\nimport React from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport './habits.css';\nimport AddHabit from '../addHabit';\n\nclass Item extends React.Component {\n  // constructor (props){\n  //     super ();\n  //     this.state = {\n  //         {\n  //             id:\n  //             \"id\": 1,\n  //             \"title\": \"Drink more water\",\n  //             \"checked\": true\n  //           },\n  //         checked: false\n  //     };\n  //     this.handleClick = this.handleClick.bind(this);\n  // }\n  handleClick(e) {\n    this.habitslist.setState({\n      checked: !this.state.checked\n    });\n    toggleIsChecked(this.id);\n  }\n\n  render() {\n    let text = this.state.checked ? /*#__PURE__*/React.createElement(\"strike\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 41\n      }\n    }, this.props.message) : this.props.message;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }\n    }), \"\\xA0\", text, /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }\n    })));\n  }\n\n} // const Item = ({ habit, toggleIsChecked }) => (\n//         <div className='todo-list-item' onClick={() => toggleIsChecked(habit.id)}>\n//       {habit.checked ? (\n//         <span role='img' aria-label='check'>\n//           ✔️\n//         </span>\n//       ) : (\n//         <span role='img' aria-label='cross'>\n//           ❌\n//         </span>\n//       )}\n//       <span className='todo-list-item-text'>{habit.title}!</span>\n//     </div>\n//     )\n\n\nexport default class HabitsList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      habitslist: []\n    };\n  }\n\n  toggleIsChecked(id) {\n    const {\n      list\n    } = this.props;\n    let update = {\n      habitslist: list.habitslist.map(habit => habit.id === id ? { ...habit,\n        isChecked: !habit.isChecked\n      } : habit)\n    };\n    this.props.updateTodoList(list.id, { ...list,\n      ...update\n    });\n  }\n\n  componentDidMount() {\n    fetch('/habitslist').then(resp => {\n      return resp.json();\n    }).then(body => {\n      this.setState({\n        habitslist: body\n      });\n    });\n  }\n\n  updateItem(id, itemAttributes) {\n    var index = this.state.habitslist.length;\n    const list = this.state.habitslist.find(list => list.id === id);\n    console.log(\"prev \", list);\n    const newlist = [...this.state.habitslist.slice(0, index), Object.assign({}, this.state.habitslist[index + 2], itemAttributes), ...this.state.habitslist.slice(index)];\n    const updatedList = { ...this.state.habitslist,\n      ...itemAttributes\n    };\n    console.log(\"new list\", newlist[this.state.habitslist.length]);\n    fetch('/habitslist', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newlist[this.state.habitslist.length])\n    }).then(e => e.json()).then(savedList => {\n      this.setState(state => ({\n        habitslist: newlist\n      }));\n      console.log(\"lefe\", newlist);\n    });\n    this.setState({\n      habitslist: [...this.state.habitslist.slice(0, index), Object.assign({}, this.state.habitslist[index + 2], itemAttributes), ...this.state.habitslist.slice(index)]\n    });\n  }\n\n  addNewHabit(str) {\n    console.log(this.state.habitslist.length);\n    this.updateItem(this.state.habitslist.length, {\n      id: this.state.habitslist.length + 1,\n      checked: false,\n      title: str\n    });\n  }\n\n  render() {\n    let allTheThings = [];\n\n    for (var i = 0; i < this.state.habitslist.length; i++) {\n      allTheThings.push( /*#__PURE__*/React.createElement(Item, {\n        message: this.state.habitslist[i].title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 31\n        }\n      }));\n    }\n\n    let items = allTheThings.map(thing => thing);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"habits-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }, \"Habits List\"), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, items), /*#__PURE__*/React.createElement(AddHabit, {\n      onAdd: e => this.addNewHabit(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/macbookpro/Desktop/web2/healthy-site/src/components/habits/habits.js"],"names":["React","Button","TextField","AddHabit","Item","Component","handleClick","e","habitslist","setState","checked","state","toggleIsChecked","id","render","text","props","message","HabitsList","list","update","map","habit","isChecked","updateTodoList","componentDidMount","fetch","then","resp","json","body","updateItem","itemAttributes","index","length","find","console","log","newlist","slice","Object","assign","updatedList","method","headers","JSON","stringify","savedList","addNewHabit","str","title","allTheThings","i","push","items","thing"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Button, TextField } from '@material-ui/core';\n\nimport './habits.css'\nimport AddHabit from '../addHabit';\n\n\nclass Item extends React.Component {\n    // constructor (props){\n    //     super ();\n\n    //     this.state = {\n    //         {\n    //             id:\n    //             \"id\": 1,\n    //             \"title\": \"Drink more water\",\n    //             \"checked\": true\n    //           },\n    //         checked: false\n    //     };\n\n    //     this.handleClick = this.handleClick.bind(this);\n    // }\n    handleClick (e){\n        this.habitslist.setState({\n            checked: !this.state.checked\n        })\n        toggleIsChecked(this.id)\n        ;\n\n    }\n\n    render (){\n\n        let text = this.state.checked ? <strike>{this.props.message}</strike> : this.props.message;\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <input type=\"checkbox\" onClick={this.handleClick} />&nbsp;{text}\n                    <hr />\n                </div>\n            </div>\n        );\n    }\n}\n\n\n// const Item = ({ habit, toggleIsChecked }) => (\n//         <div className='todo-list-item' onClick={() => toggleIsChecked(habit.id)}>\n//       {habit.checked ? (\n//         <span role='img' aria-label='check'>\n//           ✔️\n//         </span>\n//       ) : (\n//         <span role='img' aria-label='cross'>\n//           ❌\n//         </span>\n//       )}\n//       <span className='todo-list-item-text'>{habit.title}!</span>\n//     </div>\n//     )\n\n    \n\n\nexport default class HabitsList extends React.Component {\n\n    state = {\n        habitslist: [],\n    };\n\n    toggleIsChecked(id) {\n        const { list } = this.props;\n    \n        let update = {\n            habitslist: list.habitslist.map((habit) => (habit.id === id ? { ...habit, isChecked: !habit.isChecked } : habit)),\n        };\n    \n        this.props.updateTodoList(list.id, { ...list, ...update });\n      }\n\n    componentDidMount() {\n        fetch('/habitslist').then(resp => {\n            return resp.json();\n        }).then(body => {\n\n            this.setState({\n                habitslist: body\n            })\n        })\n    }\n\n\n    updateItem(id, itemAttributes) {\n        var index = this.state.habitslist.length;\n\n        const list = this.state.habitslist.find(list => list.id === id);\n        console.log(\"prev \", list)\n\n        const newlist = [\n            ...this.state.habitslist.slice(0, index),\n            Object.assign({}, this.state.habitslist[index+2], itemAttributes),\n            ...this.state.habitslist.slice(index)\n        ]\n\n        const updatedList = { ...this.state.habitslist, ...itemAttributes};\n        console.log(\"new list\", newlist[this.state.habitslist.length])\n\n\n        fetch('/habitslist', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(newlist[this.state.habitslist.length]),\n        })\n            .then(e => e.json())\n            .then(savedList => {\n                this.setState((state) => ({\n                    habitslist: newlist\n                }));\n                console.log(\"lefe\", newlist)\n            })\n\n\n        this.setState({\n            habitslist: [\n                ...this.state.habitslist.slice(0, index),\n                Object.assign({}, this.state.habitslist[index+2], itemAttributes),\n                ...this.state.habitslist.slice(index)\n            ]\n        });\n    }\n\n    addNewHabit(str){\n        console.log(this.state.habitslist.length)\n        this.updateItem(this.state.habitslist.length, {id:this.state.habitslist.length + 1, checked:false,  title: str});\n\n    }\n\n\n    render (){\n        let allTheThings = [];\n        for (var i = 0; i < this.state.habitslist.length; i++) {\n            allTheThings.push(<Item message={this.state.habitslist[i].title} />);\n        }\n        let items = allTheThings.map(thing => thing);\n\n        return (\n\n            <div className='habits-list'>\n                <h2>Habits List</h2>\n                <h4>{items}</h4>\n                <AddHabit  onAdd={(e) => this.addNewHabit(e)} ></AddHabit>\n            </div>\n        );\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}